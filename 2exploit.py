from rdkit import Chem
from rdkit.Chem import PandasTools, AllChem
from tqdm import tqdm
import copy
from rdkit import rdBase
rdBase.DisableLog('rdApp.error')


class MolData:
    def __init__(self, path):
        self.df = PandasTools.LoadSDF(path, molColName='mol_object', removeHs=True)

def process_smis(parent):
    from help.pocket_split import max_dummy
    population = set()
    for people in parent:
        connect = people.count("*")
        if connect == 0:
            # smi = max_dummy(people, poc)
            population.add(people)
        else:
            smis = one_attachment(people)
            population.update(smis)
    return population


def one_attachment(smi):
    connect = smi.count("*")
    if connect == 1:
        return [smi]
    new_mol = set()
    mol = Chem.MolFromSmiles(smi)
    if mol is None:
        return None
    atta_idx = []
    for i in range(0, mol.GetNumAtoms()):
        if mol.GetAtomWithIdx(i).GetSymbol() == '*':
            atta_idx.append(i)
    for i in atta_idx:
        m = copy.deepcopy(mol)
        mw = Chem.RWMol(m)
        for j in atta_idx:
            if i == j:
                continue
            if list(mol.GetAtomWithIdx(j).GetNeighbors())[0].GetSymbol() == 'C':
                mw.ReplaceAtom(j, Chem.rdchem.Atom(54))
            else:
                mw.ReplaceAtom(j, Chem.rdchem.Atom(6))

        nei = list(mol.GetAtomWithIdx(i).GetNeighbors())[0]
        if nei.GetSymbol() == 'C':
            mw.ReplaceAtom(nei.GetIdx(), Chem.rdchem.Atom(0), updateLabel=True)
            mw.RemoveAtom(i)
        m = Chem.Mol(mw)
        m = Chem.DeleteSubstructs(m, Chem.MolFromSmarts("[Xe]"))
        try:
            Chem.SanitizeMol(m)
        except:
            continue
        new_mol.add(Chem.MolToSmiles(m, isomericSmiles=False))
    return list(new_mol)


def link_specific_frag(fragments):
    """
    sm = Chem.MolFragmentToSmarts(mol, frag_id, isomericSmarts=False)
    target_with_dummy = AllChem.ReplaceSidechains(mol, Chem.MolFromSmarts(sm))
    smi = Chem.MolToSmiles(target_with_dummy, isomericSmiles=True)
    """
    rxn = AllChem.ReactionFromSmarts('[*:1]-[1*].[1*]-[*:2]>>[*:1]-[*:2]')
    new_mol_trial = set()
    population = process_smis(fragments)
    p2 = Chem.MolFromSmiles("[1*]C(=O)Nc1nc[nH]n1")
    for p1 in tqdm(population, desc="crossover  "):
        p1 = Chem.MolFromSmiles(p1.replace("*", "[1*]"))
        if p1 is None:
            continue
        child = rxn.RunReactants((p1, p2))
        child_smi = Chem.MolToSmiles(child[0][0])
        new_mol_trial.add(child_smi)
    return new_mol_trial


def create_newmols(fragments):
    """
    获取指定片段
    sm = Chem.MolFragmentToSmarts(mol, frag_id, isomericSmarts=False)
    target_with_dummy = AllChem.ReplaceSidechains(mol, Chem.MolFromSmarts(sm))
    smi = Chem.MolToSmiles(target_with_dummy, isomericSmiles=True)
    """
    child_set = set()
    chain = Chem.MolFromSmiles('CC(=O)Nc1nc[nH]n1')
    for frag in tqdm(fragments, desc="crossover  "):
        connect = frag.count("*")
        if connect == 0:
            child_set.add(frag)
        else:
            smis = one_attachment(frag)
            for smi in smis:
                frag = Chem.MolFromSmiles(smi)
                frag1 = Chem.rdmolops.ReplaceSubstructs(frag, Chem.MolFromSmiles('*'), chain,
                                                        replacementConnectionPoint=0)
                Chem.SanitizeMol(frag1[0])
                child_smi = Chem.MolToSmiles(frag1[0])
                child_set.add(child_smi)
    return child_set


if __name__ == '__main__':
    site = MolData("data/irg1_chembl/xp_VAL163_redock.sdf")
    site.df["r_i_glide_gscore"] = site.df["r_i_glide_gscore"].astype('float32')
    site.df.sort_values(by="r_i_glide_gscore", axis=0, ascending=True, inplace=True)
    site.df.drop_duplicates(subset=["smi"], keep="first", inplace=True)
    # site.pool = site.df[site.df["r_i_glide_gscore"] < -7]

    childs = create_newmols(site.df.smi.values)

    with open("data/irg1_zinc/ps/xp_VAL163_link.smi", 'wt') as f:
        f.write('\n'.join([line for line in childs]))     # ring_sum.keys()
